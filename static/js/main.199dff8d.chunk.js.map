{"version":3,"sources":["App.js","index.js"],"names":["App","useState","oldExpression","setOldExpression","Expression","setExpression","prev","setPrev","numerics","Set","operators","buttons","putNumerics","value","putOperator","slice","putDelete","length","evaluateExpression","evalution","eval","String","handleKeyUp","event","console","log","key","has","className","style","width","height","background","display","flexDirection","justifyContent","alignItems","tabIndex","onKeyUp","padding","borderRadius","color","textAlign","margin","flexWrap","map","buttonValue","index","backgroundColor","fontSize","fontWeight","onClick","ReactDOM","render","document","getElementById"],"mappings":"2zBAGA,SAASA,MAEP,cAAwCC,oDAAS,IAAjD,yJAAKC,cAAL,cAAoBC,iBAApB,cACA,WAAkCF,oDAAS,KAA3C,0JAAKG,WAAL,cAAiBC,cAAjB,cACA,WAAsBJ,oDAAS,OAA/B,0JAAKK,KAAL,cAAWC,QAAX,cAEIC,SAAW,IAAIC,IAAI,iBACnBC,UAAY,IAAID,IAAI,QAEpBE,QAAU,CAAC,IAAK,IAAK,IAAK,KAAM,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAG3GC,YAAc,SAACC,GACL,OAARP,MACFH,iBAAiB,SAAWC,YAC5BC,cAAcQ,IAEdR,cAAcD,WAAaS,GAE7BN,QAAQ,QAINO,YAAc,SAACD,GAEfR,cADU,MAARC,KACYF,WAAaS,EAEbT,WAAWW,MAAM,GAAI,GAAKF,GAE1CN,QAAQ,OAINS,UAAY,WACVZ,WAAWa,QAAU,GACvBZ,cAAcD,WAAWW,MAAM,GAAI,IAErCR,QAAQ,QAINW,mBAAqB,SAArBA,qBACF,IACE,IAAIC,UAAYC,KAAKhB,YACrBD,iBAAiBC,WAAa,MAC9BC,cAAcgB,OAAOF,YACrBZ,QAAQ,OAEV,eACEF,cAAc,OACdE,QAAQ,SAKRe,YAAc,SAAUC,GAC1BC,QAAQC,IAAIF,EAAMG,KACdlB,SAASmB,IAAIJ,EAAMG,KACrBd,YAAYW,EAAMG,KAEXhB,UAAUiB,IAAIJ,EAAMG,KAC3BZ,YAAYS,EAAMG,KAEG,cAAdH,EAAMG,IACbV,UAAUO,EAAMG,KAEK,UAAdH,EAAMG,KACbR,sBAKJ,OACE,kEAAKU,UAAU,MAAMC,MAAO,CAC1BC,MAAO,OACPC,OAAQ,QACRC,WAAY,UACZC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,UACXC,SAAU,EAAGC,QAAShB,YARzB,SAUE,mEAAKO,MAAO,CACVU,QAAS,OACTC,aAAc,OACdR,WAAY,WAHd,UAOE,iEAAIH,MAAO,CACTY,MAAO,UACPC,UAAW,UAFb,oCAMA,mEAAKb,MAAO,CACVC,MAAO,QACPE,WAAY,UACZC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,WACZG,QAAS,OACTI,OAAQ,OACRH,aAAc,QAThB,UAWE,iEAAIX,MAAO,CAAEc,OAAQ,OAArB,SAA+BzC,gBAC/B,iEAAI2B,MAAO,CAAEc,OAAQ,OAArB,SAA+BvC,gBAMjC,kEAAKyB,MAAO,CACVC,MAAO,QACPE,WAAY,UACZC,QAAS,OACTC,cAAe,MACfC,eAAgB,SAChBC,WAAY,WACZG,QAAS,OACTI,OAAQ,OACRH,aAAc,OACdI,SAAU,QAVZ,SAYGjC,QAAQkC,KAAI,SAACC,EAAaC,GACzB,OACE,qEACElB,MAAO,CACLmB,gBAAiB,UACjBlB,MAAO,OACPa,OAAQ,OACRM,SAAU,OACVC,WAAY,OACZV,aAAc,OAEhBW,QAAS,WACP3B,QAAQC,IAAIqB,GACRtC,SAASmB,IAAImB,GACflC,YAAYkC,GAELpC,UAAUiB,IAAImB,GACrBhC,YAAYgC,GAEW,OAAhBA,EACP9B,UAAU8B,GAEa,MAAhBA,GACP5B,sBArBN,SAuBM4B,cAaL9C,2B,6BCvKf,sDAMAoD,IAASC,OAEL,cAAC,IAAD,IAEFC,SAASC,eAAe,U","file":"static/js/main.199dff8d.chunk.js","sourcesContent":["import './App.css';\nimport { useState } from 'react';\n\nfunction App() {\n\n  let [oldExpression, setOldExpression] = useState(\"\")\n  let [Expression, setExpression] = useState(\"0\")\n  let [prev, setPrev] = useState(\"ANS\")  //default as ANS so that it starts value by deleting 0  \n\n  let numerics = new Set(\"0123456789.()\")\n  let operators = new Set(\"+-*/\")\n\n  let buttons = [\"(\", \")\", \"%\", \"CE\", \"7\", \"8\", \"9\", \"/\", \"4\", \"5\", \"6\", \"*\", \"1\", \"2\", \"3\", \"-\", \"0\", \".\", \"=\", \"+\"]\n\n  //when no. is entered this function will get called\n  let putNumerics = (value) => {\n    if (prev == \"ANS\") {\n      setOldExpression(\"Ans = \" + Expression);\n      setExpression(value);\n    } else {\n      setExpression(Expression + value);\n    }\n    setPrev(\"NUM\");\n  };\n\n  //when operator is entered this function will get called\n  let putOperator = (value) => {\n    if (prev != \"OP\") {\n      setExpression(Expression + value);\n    } else {\n      setExpression(Expression.slice(0, -1) + value);\n    }\n    setPrev(\"OP\");\n  };\n\n  //when backspace is entered this function will get called\n  let putDelete = () => {\n    if (Expression.length >= 1) {\n      setExpression(Expression.slice(0, -1));\n    }\n    setPrev(\"DEL\");\n  };\n\n  //when = is entered this function will get called\n  let evaluateExpression = () => {\n    try{\n      let evalution = eval(Expression);\n      setOldExpression(Expression + \" =\");\n      setExpression(String(evalution));\n      setPrev(\"ANS\");\n    }\n    catch{\n      setExpression(\"ERR\")\n      setPrev(\"ANS\");\n    }\n  };\n\n\n  let handleKeyUp = function (event) {\n    console.log(event.key)\n    if (numerics.has(event.key)) {         //to check if entered no. belongs to the set\n      putNumerics(event.key)\n    }\n    else if (operators.has(event.key)) {    //to check if entered operator belongs to the set\n      putOperator(event.key)\n    }\n    else if (event.key === \"Backspace\") {\n      putDelete(event.key)\n    }\n    else if (event.key === \"Enter\") {\n      evaluateExpression();\n    }\n  }\n\n\n  return (\n    <div className=\"App\" style={{\n      width: \"100%\",\n      height: \"100vh\",\n      background: \"#999999\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"center\",  //its for major axis i.e x in case of column\n      alignItems: \"center\"       //its for minor axis i.e y in this case\n    }} tabIndex={0} onKeyUp={handleKeyUp}>\n\n      <div style={{\n        padding: \"10px\",\n        borderRadius: \"10px\",\n        background: \"#444444\"\n\n      }}>\n\n        <h1 style={{\n          color: \"#ffffff\",\n          textAlign: \"center\"\n        }}> My Awesome Calculator</h1>\n\n        {/* FOR CALCULATION AREA */}\n        <div style={{\n          width: \"400px\",\n          background: \"#f7f3e1\",\n          display: \"flex\",\n          flexDirection: \"column\",\n          justifyContent: \"center\",\n          alignItems: \"flex-end\",\n          padding: \"15px\",\n          margin: \"20px\",\n          borderRadius: \"15px\"\n        }}>\n          <h6 style={{ margin: \"6px\" }}>{oldExpression}</h6>\n          <h1 style={{ margin: \"6px\" }}>{Expression}</h1>\n        </div>\n\n\n\n        {/* FOR BUTTONS */}\n        <div style={{\n          width: \"400px\",\n          background: \"#f7f3e1\",\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"center\",\n          alignItems: \"flex-end\",\n          padding: \"15px\",\n          margin: \"20px\",\n          borderRadius: \"15px\",\n          flexWrap: \"wrap\"\n        }}>\n          {buttons.map((buttonValue, index) => {\n            return (\n              <button\n                style={{\n                  backgroundColor: \"#e6d37c\",\n                  width: \"80px\",\n                  margin: \"10px\",\n                  fontSize: \"18px\",\n                  fontWeight: \"bold\",\n                  borderRadius: \"5px\"\n                }}\n                onClick={() => {\n                  console.log(buttonValue)\n                  if (numerics.has(buttonValue)) {\n                    putNumerics(buttonValue)\n                  }\n                  else if (operators.has(buttonValue)) {\n                    putOperator(buttonValue)\n                  }\n                  else if (buttonValue === \"CE\") {\n                    putDelete(buttonValue)\n                  }\n                  else if (buttonValue === \"=\") {\n                    evaluateExpression();\n                  }\n                }}>{buttonValue}</button>\n            );\n          })}\n        </div>\n\n      </div>\n    </div>\n\n\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n \n    <App />,\n  \n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}